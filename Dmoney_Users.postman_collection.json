{
	"info": {
		"_postman_id": "d044dd80-cdb2-420c-bab7-d64890e047b3",
		"name": "Dmoney_Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22815578"
	},
	"item": [
		{
			"name": "Wrong_Method_Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsondata =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsondata.error.message).to.contain(\"Not Found\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login_With_Wrong_Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"If user give invalid email, then user will found no user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains('User not found');\r",
							"});\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login_With _Wrong_Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"User inputs wrong password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.contains('Password incorrect');\r",
							"});\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"salman@roadtocareer.net\",\r\n    \"password\":\"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login_With_Valid_Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData=pm.response.json();\r",
							"pm.environment.set(\"token\",jsonData.token)\r",
							"\r",
							"pm.test(\"Status code Validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"Login successfully\")\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\":\"salman@roadtocareer.net\",\r\n    \"password\":\"1234\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get_User_List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code;\r",
							"\r",
							"switch(status_code)\r",
							"{\r",
							"    case 200 :\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.test(\"Status code validations\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"User list message verification\", function () {\r",
							"    pm.expect(jsonData.message).contains('User list')\r",
							"    console.log(jsonData.users[10].id)\r",
							"    });\r",
							"    break\r",
							"\r",
							"    case 401 :\r",
							"    pm.test(\"Status code validations\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"    });\r",
							"\r",
							"\r",
							"    pm.test(\"User list message verification\", function () {\r",
							"    pm.expect(jsonData.error.message).contains('No Token Found!')\r",
							"    \r",
							"    });\r",
							"    break\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/list",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_List_With_Invalid_Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"User can't access with wrong token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.contains('Token expired');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "1234654",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/list",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_List_With_No_Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"User should get a no token found message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.contains('No Token Found!');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/list",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code Validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsondata = pm.response.json()\r",
							"\r",
							"pm.test(\"Message Validation\",function(){\r",
							"    pm.expect(jsondata.message).to.eqls(\"User found\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User_Without_Auth_&&_Secret_Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"var jsondata = pm.response.json()\r",
							"\r",
							"pm.test(\"Message validation\",function(){\r",
							"    pm.expect(jsondata.error.message).to.eql(\"No Token Found!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User_Wrong_Auth_&&_Without_Secret_Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Message validation\",function(){\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Token expired!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "456465456",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User_Valid_Auth_&&_Without_Secret_Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Without secret key code validation\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Message validation\",function(){\r",
							"    pm.expect(jsonData.error.message).to.eql(\"Secret key missing!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/7",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_Invalid_User_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code Validation\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"User not found\")\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{pwKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/777987987",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"777987987"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_Without_Secret_Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"switch(status_code)\r",
							"{\r",
							"    case 401 :\r",
							"        \r",
							"        pm.test(\"Status code validation\", function () {\r",
							"        pm.response.to.have.status(401);\r",
							"        });\r",
							"        pm.test(\"Secret auth key validation message\", function () {\r",
							"        \r",
							"        pm.expect(jsonData.error.message).to.contains('Secret auth key validation failure!');\r",
							"        });\r",
							"        \r",
							"        break\r",
							"    \r",
							"    case 403 :\r",
							"\r",
							"        pm.test(\"Status validation\", function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"To expired message validationn\", function () {\r",
							"        \r",
							"        pm.expect(jsonData.error.message).to.contains('Token expired!');\r",
							"        });\r",
							"        break\r",
							"\r",
							"        case 500 :\r",
							"             pm.test(\"Status code validation\", function () {\r",
							"             pm.response.to.have.status(500);\r",
							"             });\r",
							"             pm.test(\"Internal server error message \", function () {\r",
							"        \r",
							"            pm.expect(jsonData.message).to.contains('Error creating user');\r",
							"            });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0150\";\r",
							"var code_nid=\"123\"\r",
							"var phoneNumber=code+radnomDigits;\r",
							"var nid=code_nid+radnomDigits;\r",
							"var name = pm.variables.replaceIn(\"{{$randomFullName}}\")\r",
							"var email = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
							"var pass = _.random(1000,9999);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{User_mail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_Valid_Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"switch(status_code)\r",
							"{\r",
							"    case 201 :\r",
							"        \r",
							"        pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(201);\r",
							"        });\r",
							"        pm.test(\"User should create successfully\", function () {\r",
							"        \r",
							"        pm.expect(jsonData.message).to.contains('User created');\r",
							"        });\r",
							"        \r",
							"        pm.environment.set(\"id\",jsonData.user.id)\r",
							"        pm.environment.set(\"Role\",jsonData.user.role)\r",
							"        \r",
							"        break\r",
							"    \r",
							"    case 403 :\r",
							"\r",
							"        pm.test(\"Status validation\", function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"To expired message validationn\", function () {\r",
							"        \r",
							"        pm.expect(jsonData.error.message).to.contains('Token expired!');\r",
							"        });\r",
							"        break\r",
							"\r",
							"        case 500 :\r",
							"             pm.test(\"Status code validation\", function () {\r",
							"             pm.response.to.have.status(500);\r",
							"             });\r",
							"             pm.test(\"Internal server error message \", function () {\r",
							"        \r",
							"            pm.expect(jsonData.message).to.contains('Error creating user');\r",
							"            });\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var code_nid=pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"var phoneNumber=code+radnomDigits;\r",
							"var nid=code_nid+radnomDigits;\r",
							"var name = pm.variables.replaceIn(\"{{$randomFullName}}\")\r",
							"var email = pm.variables.replaceIn(\"{{$randomEmail}}\")\r",
							"var pass = _.random(1000,9999);\r",
							"\r",
							"pm.environment.set(\"User_name\",name)\r",
							"pm.environment.set(\"User_mail\",email)\r",
							"pm.environment.set(\"phoneNumber\",phoneNumber)\r",
							"pm.environment.set(\"nid\",nid)\r",
							"pm.environment.set(\"password\",pass)\r",
							"\r",
							"// console.log(pm.environment.get(\"User_name\"))\r",
							"// console.log(pm.environment.get(\"User_mail\"))\r",
							"// console.log(pm.environment.get(\"phoneNumber\"))\r",
							"// console.log(pm.environment.get(\"nid\"))\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{User_mail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"{{nid}}\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User(After_Create_New_User)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsondata = pm.response.json()\r",
							"console.log(typeof(jsondata.user.password))\r",
							"console.log(typeof(pm.environment.get(\"password\")))\r",
							"\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 200 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.message).to.eqls(\"User found\")\r",
							"        });\r",
							"\r",
							"        pm.test(\"User id verifications\",function(){\r",
							"            pm.expect(jsondata.user.id).to.eqls(parseInt(pm.environment.get(\"id\")))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User name verifications\",function(){\r",
							"            pm.expect(jsondata.user.name).to.eqls(pm.environment.get(\"User_name\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User mail verifications\",function(){\r",
							"              pm.expect(jsondata.user.email).to.eqls(pm.environment.get(\"User_mail\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User password verifications\",function(){\r",
							"               pm.expect(parseInt(jsondata.user.password)).to.eqls(pm.environment.get(\"password\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Phone number verifications\",function(){\r",
							"            pm.expect(jsondata.user.phone_number).to.eqls(pm.environment.get(\"phoneNumber\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User NID verifications\",function(){\r",
							"            pm.expect(jsondata.user.nid).to.eqls(pm.environment.get(\"nid\"))\r",
							"        });\r",
							"\r",
							"        pm.test(\"Role verifications\",function(){\r",
							"            pm.expect(jsondata.user.role).to.eql(pm.environment.get(\"Role\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Balance check for new users \",function(){\r",
							"            pm.expect(jsondata.user.balance).to.eql(0)\r",
							"        });\r",
							"\r",
							"        break\r",
							"\r",
							"    case 403 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{pwKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Email_Manual",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//salman@roadtocareer.net\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Mail verification\",function(){\r",
							"    pm.expect(jsonData.user.email).to.eql(\"salman@roadtocareer.net\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/email/salman@roadtocareer.net",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"email",
						"salman@roadtocareer.net"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Email_Dynamic_Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//salman@roadtocareer.net\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Mail verification\",function(){\r",
							"    pm.expect(jsonData.user.email).to.eql(\"salman@roadtocareer.net\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/email/{{User_mail}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"email",
						"{{User_mail}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Invalid_Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.error.message).to.contain(\"Not found\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/email/test0210120@gmail.com",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"email",
						"test0210120@gmail.com"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Phone_Number_Dynamic",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Phone number verification\",function(){\r",
							"    pm.expect(jsonData.user.phone_number).to.eql(pm.environment.get(\"phoneNumber\"))\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/phonenumber/{{phoneNumber}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"phonenumber",
						"{{phoneNumber}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Phone_Number_Static",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json()\r",
							"console.log(typeof(jsonData.user.phone_number))\r",
							"\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User found\")\r",
							"});\r",
							"\r",
							"pm.test(\"Phone number verification\",function(){\r",
							"    pm.expect(jsonData.user.phone_number).to.eql(\"01686606909\")\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/phonenumber/01686606909",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"phonenumber",
						"01686606909"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_User_by_Phone_Number_(Invalid_Number)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eql(\"User not found\")\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/phonenumber/01988120748",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"phonenumber",
						"01988120748"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_Existing_User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(208);\r",
							"});\r",
							"pm.test(\"User should not create if exists\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.message).to.contains('User already exists');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Salman Rahman\",\r\n    \"email\":\"salman@roadtocareer.net\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01686606909\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_Name_Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var phone=code+radnomDigits;\r",
							"pm.environment.set(\"phone\",phone)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone}}\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_Name_Only_Space",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"//var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var phone=code+radnomDigits;\r",
							"pm.environment.set(\"phone\",phone)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"     \",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone}}\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_Wrong_Mail_Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"User should not create if exists\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.message).to.contains('\\\"email\\\" must be a valid email');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var phone=code+radnomDigits;\r",
							"pm.environment.set(\"phone\",phone)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Testid\",\r\n    \"email\":\"@gmail.com\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"{{phone}}\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_Only_Using_Space_Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var phone=code+radnomDigits;\r",
							"pm.environment.set(\"phone\",phone)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Test_Account\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"     \",\r\n    \"phone_number\":\"{{phone}}\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_Wrong_PhoneNumber_Format",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"TestingID\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"01032312199\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_User_PhoneNumber_Large_Number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"User should not create if exists\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.message).to.contains('\\\"phone_number\\\" length must be less than or equal to 11 characters long');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var radnomDigits=_.random(1000000,9999999);\r",
							"var code=\"0151\";\r",
							"var phone=code+radnomDigits;\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"TestingID\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"1234\",\r\n    \"phone_number\":\"0153231312512144\",\r\n    \"nid\":\"1246545\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_NID_String",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"Invalid NID number\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"01511360770\",\r\n    \"nid\":\"StringString\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_Without_NID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"Invalid NID number\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"01511360770\",\r\n    \"nid\":\"\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_NID_Lenght_Below_7",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"\\\"nid\\\" length must be at least 7 characters long\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"01511360770\",\r\n    \"nid\":\"123456\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_NID_Lenght_Below_7 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"\\\"nid\\\" length must be at least 7 characters long\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"01511360770\",\r\n    \"nid\":\"123456\",\r\n    \"role\":\"Customer\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create_New_User_Role_Interger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData =pm.response.json()\r",
							"\r",
							"pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response message Validation\",function(){\r",
							"    pm.expect(jsonData.message).to.eqls(\"Without role can't create user\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{User_name}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{password}}\",\r\n    \"phone_number\":\"01511360070\",\r\n    \"nid\":\"12345634\",\r\n    \"role\":\"1235\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_User_Valid_Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var status_code = pm.response.code\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 403 : \r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsonData.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"        break;\r",
							"\r",
							"        case 200:\r",
							"\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Update message verification\",function(){\r",
							"            pm.expect(jsonData.message).to.contains(\"User updated\");\r",
							"        });\r",
							"        pm.environment.set(\"updated_name\",jsonData.user.name);\r",
							"        pm.environment.set(\"updated_email\",jsonData.user.email);\r",
							"        pm.environment.set(\"updated_password\",jsonData.user.password);\r",
							"        pm.environment.set(\"updated_phone\",jsonData.user.phone_number);\r",
							"        pm.environment.set(\"updated_nid\",jsonData.user.nid);\r",
							"        pm.environment.set(\"updated_role\",jsonData.user.role);\r",
							"        \r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{$randomFullName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{$randomPassword}}\",\r\n    \"phone_number\":\"{{phoneNumber}}\",\r\n    \"nid\":\"54646000\",\r\n    \"role\":\"EndUser\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/update/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"update",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User(After_Updated)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsondata = pm.response.json()\r",
							"console.log(typeof(jsondata.user.password))\r",
							"console.log(typeof(pm.environment.get(\"password\")))\r",
							"\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 200 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.message).to.eqls(\"User found\")\r",
							"        });\r",
							"\r",
							"        pm.test(\"User id verifications\",function(){\r",
							"            pm.expect(jsondata.user.id).to.eqls(parseInt(pm.environment.get(\"id\")))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User name verifications\",function(){\r",
							"            pm.expect(jsondata.user.name).to.eqls(pm.environment.get(\"updated_name\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User mail verifications\",function(){\r",
							"              pm.expect(jsondata.user.email).to.eqls(pm.environment.get(\"updated_email\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User password verifications\",function(){\r",
							"               pm.expect(jsondata.user.password).to.eqls(pm.environment.get(\"updated_password\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Phone number verifications\",function(){\r",
							"            pm.expect(jsondata.user.phone_number).to.eqls(pm.environment.get(\"updated_phone\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User NID verifications\",function(){\r",
							"            pm.expect(jsondata.user.nid).to.eqls(pm.environment.get(\"updated_nid\"))\r",
							"        });\r",
							"\r",
							"        pm.test(\"Role verifications\",function(){\r",
							"            pm.expect(jsondata.user.role).to.eql(pm.environment.get(\"updated_role\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Balance check for new users \",function(){\r",
							"            pm.expect(jsondata.user.balance).to.eql(0)\r",
							"        });\r",
							"\r",
							"        break\r",
							"\r",
							"    case 403 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{pwKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_User_Specific_Value Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var status_code = pm.response.code\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 403 : \r",
							"\r",
							"       \r",
							"\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsonData.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"        break;\r",
							"\r",
							"        case 200:\r",
							"        pm.environment.set(\"patch_role\",jsonData.user.role)\r",
							"        \r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Specific value updated message verification\",function(){\r",
							"            pm.expect(jsonData.message).to.eqls(\"User updated successfully\");\r",
							"        });\r",
							"\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"role\":\"Agent\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/update/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"update",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User(After_Specific_Value_Update)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsondata = pm.response.json()\r",
							"\r",
							"\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 200 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.message).to.eqls(\"User found\")\r",
							"        });\r",
							"\r",
							"        pm.test(\"User id verifications\",function(){\r",
							"            pm.expect(jsondata.user.id).to.eqls(parseInt(pm.environment.get(\"id\")))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User name verifications\",function(){\r",
							"            pm.expect(jsondata.user.name).to.eqls(pm.environment.get(\"updated_name\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User mail verifications\",function(){\r",
							"              pm.expect(jsondata.user.email).to.eqls(pm.environment.get(\"updated_email\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User password verifications\",function(){\r",
							"               pm.expect(jsondata.user.password).to.eqls(pm.environment.get(\"updated_password\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Phone number verifications\",function(){\r",
							"            pm.expect(jsondata.user.phone_number).to.eqls(pm.environment.get(\"updated_phone\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User NID verifications\",function(){\r",
							"            pm.expect(jsondata.user.nid).to.eqls(pm.environment.get(\"updated_nid\"))\r",
							"        });\r",
							"\r",
							"        pm.test(\"Role verifications\",function(){\r",
							"            pm.expect(jsondata.user.role).to.eql(pm.environment.get(\"patch_role\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Balance check for new users \",function(){\r",
							"            pm.expect(jsondata.user.balance).to.eql(0)\r",
							"        });\r",
							"\r",
							"        break\r",
							"\r",
							"    case 403 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{pwKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update_User_Specific_Value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"var status_code = pm.response.code\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 403 : \r",
							"\r",
							"       \r",
							"\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsonData.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"        break;\r",
							"\r",
							"        case 200:\r",
							"        pm.environment.set(\"patch_role\",jsonData.user.role)\r",
							"        \r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Specific value updated message verification\",function(){\r",
							"            pm.expect(jsonData.message).to.eqls(\"User updated successfully\");\r",
							"        });\r",
							"\r",
							"        break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"balance\":420\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/update/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"update",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Specific_User(After_Specific_Value_Update) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var status_code = pm.response.code\r",
							"var jsondata = pm.response.json()\r",
							"\r",
							"\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 200 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.message).to.eqls(\"User found\")\r",
							"        });\r",
							"\r",
							"        pm.test(\"User id verifications\",function(){\r",
							"            pm.expect(jsondata.user.id).to.eqls(parseInt(pm.environment.get(\"id\")))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User name verifications\",function(){\r",
							"            pm.expect(jsondata.user.name).to.eqls(pm.environment.get(\"updated_name\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User mail verifications\",function(){\r",
							"              pm.expect(jsondata.user.email).to.eqls(pm.environment.get(\"updated_email\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User password verifications\",function(){\r",
							"               pm.expect(jsondata.user.password).to.eqls(pm.environment.get(\"updated_password\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Phone number verifications\",function(){\r",
							"            pm.expect(jsondata.user.phone_number).to.eqls(pm.environment.get(\"updated_phone\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"User NID verifications\",function(){\r",
							"            pm.expect(jsondata.user.nid).to.eqls(pm.environment.get(\"updated_nid\"))\r",
							"        });\r",
							"\r",
							"        pm.test(\"Role verifications\",function(){\r",
							"            pm.expect(jsondata.user.role).to.eql(pm.environment.get(\"patch_role\"))\r",
							"        });\r",
							"        \r",
							"        pm.test(\"Balance check for new users \",function(){\r",
							"            pm.expect(jsondata.user.balance).to.eql(420)\r",
							"        });\r",
							"\r",
							"        break\r",
							"\r",
							"    case 403 :\r",
							"        pm.test(\"Status code Validation\", function () {\r",
							"        pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Message Validation\",function(){\r",
							"        pm.expect(jsondata.error.message).to.eqls(\"Token expired!\")\r",
							"        });\r",
							"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{pwKey}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Without_Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 401 :\r",
							"\r",
							"        pm.test(\"Status code validation \", function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Response message validation\",function(){\r",
							"            pm.expect(jsonData.error.message).to.eqls(\"No Token Found!\")\r",
							"        }) ;\r",
							"\r",
							"        break\r",
							"    \r",
							"    case 403 :\r",
							"        pm.test(\"Status code validation \", function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Response message validation\",function(){\r",
							"            pm.expect(jsonData.error.message).to.contains(\"Token expired!\")\r",
							"        }) ;\r",
							"        break\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/delete/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"delete",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_Without_Secret_Key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"switch (status_code)\r",
							"{\r",
							"    case 401 :\r",
							"\r",
							"        pm.test(\"Status code validation \", function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"\r",
							"\r",
							"        pm.test(\"Response message validation\",function(){\r",
							"        pm.expect(jsonData.error.message).to.eqls(\"Secret auth key validation failure!\")\r",
							"        }) ;\r",
							"        break\r",
							"    \r",
							"    case 403 :\r",
							"        pm.test(\"Status code validation \", function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"\r",
							"        pm.test(\"Response message validation\",function(){\r",
							"            pm.expect(jsonData.error.message).to.contains(\"Token expired!\")\r",
							"        }) ;\r",
							"        break\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/delete/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"delete",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete_User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"switch (status_code) \r",
							"{\r",
							"\r",
							"    case 404 :\r",
							"    \r",
							"    pm.test(\"User not found message validation \", function () {  \r",
							"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
							"    });\r",
							"    break\r",
							"\r",
							"    case 200 :\r",
							"    pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    pm.test(\"User delete message validation \", function () {  \r",
							"    pm.expect(jsonData.message).to.contains(\"User deleted successfully\");\r",
							"    });\r",
							"    break\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/delete/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"delete",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search_Deleted_User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"User not found\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.contains(\"User not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/search/id/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"search",
						"id",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Already_Delete_User_Again_Try_Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var status_code = pm.response.code\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"\r",
							"switch (status_code) \r",
							"{\r",
							"\r",
							"    case 404 :\r",
							"    \r",
							"    pm.test(\"Status code validation\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"    });\r",
							"\r",
							"    pm.test(\"User not found message validation \", function () {  \r",
							"    pm.expect(jsonData.message).to.contains(\"User not found\");\r",
							"    });\r",
							"    break\r",
							"\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "X-AUTH-SECRET-KEY",
						"value": "{{secret_key}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/delete/{{id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"delete",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}